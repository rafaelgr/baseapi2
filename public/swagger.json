{
	"swagger": "2.0",
	"info": {
		"title": "BASEAPI APP2",
		"version": "1.2.0",
		"description": "This is a test api that runs with swagger.\nThe idea is to build an operational API with all things a developer need\nThis file uses almost every single aspect of the [Open API Specification](https://openapis.org/).  \nThis API will use JSON.  \nJSON looks like this:  \n\n```JSON\n{\n  \"key\": \"value\",\n  \"anotherKey\": \"anotherValue\"\n}\n```    \n",
		"termsOfService": "http://www.ariadnasw.com/aviso-legal/",
		"contact": {
			"name": "Rafael Garc√≠a",
			"email": "rafa@myariadna.com"
		},
		"license": {
			"name": "CC BY-NC 4.0",
			"url": "https://creativecommons.org/licenses/by-nc/4.0/"
		}
	},
	"tags": [
		{
			"name": "User groups",
			"description": "User groups functions related"
		},
		{
			"name": "User",
			"description": "User functions related"
		},
		{
			"name": "Utilities",
			"description": "Some utilies for testers"
		}
	],
	"host": "localhost:5000",
	"basePath": "/api",
	"schemes": [
		"http"
	],
	"consumes": [
		"application/json"
	],
	"produces": [
		"application/json"
	],
	"paths": {
		"/user_group": {
			"get": {
				"summary": "Get all user groups",
				"description": "Returns an array with all user groups in the database",
				"tags": [
					"User groups"
				],
				"parameters": [
					{
						"$ref": "#/parameters/test"
					}
				],
				"responses": {
					"200": {
						"description": "A list of user groups",
						"schema": {
							"title": "UserGroups",
							"description": "A user groups array",
							"type": "array",
							"items": {
								"$ref": "#/definitions/UserGroup"
							}
						}
					},
					"500": {
						"$ref": "#/responses/ErrorResponse"
					}
				}
			},
			"post": {
				"summary": "Create a new user group",
				"description": "Creates a new user group using the object passed in parameters",
				"tags": [
					"User groups"
				],
				"parameters": [
					{
						"$ref": "#/parameters/test"
					},
					{
						"$ref": "#/parameters/userGroup"
					}
				],
				"responses": {
					"200": {
						"description": "User group succesfully created",
						"schema": {
							"$ref": "#/definitions/UserGroup"
						}
					},
					"500": {
						"$ref": "#/responses/ErrorResponse"
					}
				}
			}
		},
		"/user_group/{id}": {
			"get": {
				"summary": "Get a user group by ID",
				"description": "Returns the user group with an id that matches the parameter",
				"tags": [
					"User groups"
				],
				"parameters": [
					{
						"$ref": "#/parameters/test"
					},
					{
						"$ref": "#/parameters/id"
					}
				],
				"responses": {
					"200": {
						"description": "A user group",
						"schema": {
							"$ref": "#/definitions/UserGroup"
						}
					},
					"404": {
						"$ref": "#/responses/UserGroupNotFoundResponse"
					},
					"500": {
						"$ref": "#/responses/ErrorResponse"
					}
				}
			},
			"put": {
				"summary": "Modify a user group",
				"description": "Modifies the user group that matches id parameter according to the object passed in body",
				"tags": [
					"User groups"
				],
				"parameters": [
					{
						"$ref": "#/parameters/test"
					},
					{
						"$ref": "#/parameters/id"
					},
					{
						"$ref": "#/parameters/userGroup"
					}
				],
				"responses": {
					"200": {
						"description": "User group successfully modified",
						"schema": {
							"$ref": "#/definitions/UserGroup"
						}
					},
					"500": {
						"$ref": "#/responses/ErrorResponse"
					}
				}
			},
			"delete": {
				"summary": "Deletes a user group",
				"description": "Removes the user group whose id matches the given parameters",
				"tags": [
					"User groups"
				],
				"parameters": [
					{
						"$ref": "#/parameters/test"
					},
					{
						"$ref": "#/parameters/id"
					}
				],
				"responses": {
					"200": {
						"description": "User group sucessfully removed"
					},
					"500": {
						"$ref": "#/responses/ErrorResponse"
					}
				}
			}
		},
		"/user": {
			"get": {
				"summary": "Get all users",
				"description": "Returns an array with all users in the database",
				"tags": [
					"User"
				],
				"parameters": [
					{
						"$ref": "#/parameters/test"
					}
				],
				"responses": {
					"200": {
						"description": "A list of users",
						"schema": {
							"title": "Users",
							"description": "A users array",
							"type": "array",
							"items": {
								"$ref": "#/definitions/User"
							}
						}
					},
					"500": {
						"$ref": "#/responses/ErrorResponse"
					}
				}
			},
			"post": {
				"summary": "Create a new user",
				"description": "Creates a new userusing the object passed in parameters",
				"tags": [
					"User"
				],
				"parameters": [
					{
						"$ref": "#/parameters/test"
					},
					{
						"$ref": "#/parameters/user"
					}
				],
				"responses": {
					"200": {
						"description": "User succesfully created",
						"schema": {
							"$ref": "#/definitions/User"
						}
					},
					"500": {
						"$ref": "#/responses/ErrorResponse"
					}
				}
			}
		},
		"/user/{id}": {
			"get": {
				"summary": "Get a user by ID",
				"description": "Returns the user with an id that matches the parameter",
				"tags": [
					"User"
				],
				"parameters": [
					{
						"$ref": "#/parameters/test"
					},
					{
						"$ref": "#/parameters/id"
					}
				],
				"responses": {
					"200": {
						"description": "A user",
						"schema": {
							"$ref": "#/definitions/User"
						}
					},
					"404": {
						"$ref": "#/responses/UserNotFoundResponse"
					},
					"500": {
						"$ref": "#/responses/ErrorResponse"
					}
				}
			},
			"put": {
				"summary": "Modify a user",
				"description": "Modifies the user that matches id parameter according to the object passed in body",
				"tags": [
					"User"
				],
				"parameters": [
					{
						"$ref": "#/parameters/test"
					},
					{
						"$ref": "#/parameters/id"
					},
					{
						"$ref": "#/parameters/user"
					}
				],
				"responses": {
					"200": {
						"description": "User successfully modified",
						"schema": {
							"$ref": "#/definitions/User"
						}
					},
					"500": {
						"$ref": "#/responses/ErrorResponse"
					}
				}
			},
			"delete": {
				"summary": "Deletes a user",
				"description": "Removes the user whose id matches the given parameters",
				"tags": [
					"User"
				],
				"parameters": [
					{
						"$ref": "#/parameters/test"
					},
					{
						"$ref": "#/parameters/id"
					}
				],
				"responses": {
					"200": {
						"description": "User sucessfully removed"
					},
					"500": {
						"$ref": "#/responses/ErrorResponse"
					}
				}
			}
		},
		"/echo": {
			"get": {
				"tags": [
					"Utilities"
				],
				"description": "Returns the string passed in parameters",
				"operationId": "hello",
				"parameters": [
					{
						"$ref": "#/parameters/text"
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/EchoResponse"
						}
					},
					"default": {
						"description": "Error",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			}
		},
		"/swagger": {
			"x-swagger-pipe": "swagger_raw"
		}
	},
	"definitions": {
		"Error": {
			"title": "Error",
			"description": "An error object that contains a message",
			"properties": {
				"message": {
					"type": "string"
				}
			}
		},
		"UserGroup": {
			"title": "UserGroup",
			"description": "A UserGroup object",
			"properties": {
				"id": {
					"type": "integer"
				},
				"name": {
					"type": "string"
				}
			}
		},
		"User": {
			"title": "User",
			"description": "A user object",
			"properties": {
				"id": {
					"type": "integer"
				},
				"name": {
					"type": "string"
				},
				"userGroup": {
					"$ref": "#/definitions/UserGroup"
				}
			}
		},
		"EchoResponse": {
			"required": [
				"message"
			],
			"properties": {
				"message": {
					"type": "string"
				}
			}
		}
	},
	"responses": {
		"ErrorResponse": {
			"description": "A standard error response",
			"schema": {
				"$ref": "#/definitions/Error"
			}
		},
		"UserGroupNotFoundResponse": {
			"description": "The user group doesn't exist (User group not found)"
		},
		"UserNotFoundResponse": {
			"description": "The user doesn't exist (User not found)"
		}
	},
	"parameters": {
		"id": {
			"name": "id",
			"in": "path",
			"description": "An id used for search an specific object",
			"required": true,
			"type": "integer"
		},
		"userGroup": {
			"name": "userGroup",
			"in": "body",
			"description": "A UserGroup object",
			"schema": {
				"$ref": "#/definitions/UserGroup"
			}
		},
		"user": {
			"name": "user",
			"in": "body",
			"description": "A User object",
			"schema": {
				"$ref": "#/definitions/User"
			}
		},
		"text": {
			"name": "text",
			"in": "query",
			"description": "String that's going to be echoed",
			"required": false,
			"type": "string"
		},
		"test": {
			"name": "test",
			"in": "query",
			"description": "Indicates if test database is used (default 'false')",
			"required": false,
			"type": "boolean"
		}
	}
}